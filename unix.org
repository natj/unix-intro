* Introduction to UNIX

** Directory structure
+ root /
+ home ~
+ absolute and relative paths
+ current dir (.) and previous dir (..)
  

** Basic commands
*** Navigation
+ cd - change directory
+ ls - list dir content
+ cat - print file
+ * - sign
+ pwd - show current dir
+ tabulator (your best friend) - fill in partial words
+ man pages
  + enter
  + space
  + Q
+ options
+ Keyboard commands
  + ctrl+c
  + Q (in man pages)

*** TODO Exercises
1. Run the following commands step by step and check with pwd (and ls) where 
you are
   + cd /
   + cd ~
   + cd /
   + cd 
2. Check using the man command what is the option (-XXX) for ls to display 
all of the files in the current dir (so also the hidden .-files)


*** File management
+ touch - create an empty file
+ mkdir - make directory
+ rm - remove
  + rm file
  + rm -r (recursive)
  + rm -f (force)
  + rmdir (for directories)
+ cp (copy)
+ mv (move)
+ file permissions
  + ls -la
  + chmod +/- r/w/x
    + a/u/g
+ df (disk usage)
+ du (dir usage)
  + -h (human readable)

*** TODO Exercises
1. Create an empty file called "foo.txt"
2. Copy the file "foo.txt" into "foo.txt.copy"
3. Rename the file "foo.txt.copy" to "foo2"
4. Create an empty directory called "data"
5. Move the file "foo2" into "data" directory

6. Create a new subdirectory inside "data" called "new"
7. Copy the file "foo2" in the "data" directory into "new" directory;
   Rename it at the same time to "foo3"
8. Move the file "foo3" in the "new" directory back to home directory;
   At the same time, change the name into "foo.old"
9. Delete the file "foo.old"
10. Remove the "new" subdirectory inside the "data" directory

11. Check the file permissions (with ls -l) for the "foo.txt"
12. Make the file read-only for all; check the permissions again using the ls -l
13. Add write permission to yourself
14. How big is the "foo.txt"?
15. What is the current disk space quota?


*** Process management
+ top
  + pid
+ kill (pid)

*** TODO Exercises
1. Check what is the heaviest process somebody (who?) is running using the top
command
2. What is the PID number of this process?


** More advanced stuff

*** Searching
+ grep - search patterns
+ locate
  
*** I/O and chaining
+ | piping
+ > insert
+ >> append

*** SSH
+ ssh user@host
  + ssh user@linux.utu.fi
+ scp user@host:~/path/to/file file_name

*** Compression
+ tar -caf file.tar.gz files
  + c - compress
  + a - automatic detection
  + f - file
+ tar -xf file.tar.gz
  + x - decompress

*** Misc
+ echo
+ date
+ cal (calendar)
+ uptime
+ whoami
+ w (who is online)
+ finger user
+ cat /proc/cpuinfo
+ cat /proc/meminfo
+ ping host
  
*** TODO Exercises
1. Compress the data dir into data.tar.gz
2. Remove the "data" dir
3. List the contents of the data.tar.gz (HINT: Don't forget 
   the -f option at the end so that tar reads your file)
4. Uncompress the data.tar.gz
5. List the content of the data.tar.gz with the additional verbose command BUT
   redirect the output to go into a file "data_content.txt"

6. SSH to linux.utu.fi with your username (if not already inside)
7. Check how many users there are online using irssi
   + use w to list users
   + use grep to filter for specific words (don't forget piping)
   + check grep manual for counting the hits


** Editors
*** Emacs
+ ctrl+x+s (save)
+ ctrl+x+c (exit)
+ More commands:
  + ctrl + k (kill)
  + ctrl+f (open)
  + ctrl+s (search)
  + ctrl+n/p (next/previous)
  + ctrl+f/b (forward/back)
  + ctrl+XXX+g (abort)

*** nano
+ No specialities
+ ctrl+x (to quit)
  
*** vi/vim
+ Good to know how to exit:
  +  :+wq

*** TODO Exercises

1. Edit the file foo.txt to include "Hello from Emacs!"; remember to save
2. Do the same using the nano
3. Finally open the file using vi and exit
   + EXTRA: add text using vi also (HINT: google vi tutorial for basic usage)


** Scripting
Where is our bash-script interpreter located
+ which bash
  + -> /bin/bash

So now we know how to start bash interpreter
+ start your .sh file with #!+location

**** Basic script
#!/bin/bash
MSG="Hello"
ME=`whoami`
echo $MSG $ME

# Notice that there are no spaces around "=".
# Backticks ` are used when calling commands (not ' or ")

**** Usage
Now we must make it executable (for safety reasons)
+ chmod +x xxx.sh
+ ./xxx.sh

*** TODO Exercises 
1. Write a script myscript.sh that:
   + Welcomes the current user and 
   + displays the current date
2. Run the script, is it working? What is the output?
3. Extend the previous script to work as a basic backup script:
   + Make it so that when run, it compresses the previously made "data" dir
     into a file called backup_XXX.tar.gz where
   + XXX is the current date (HINT: use TIME=`date +%Y_%m_%d` to 
     get the date in a format where underscores are used)
     
